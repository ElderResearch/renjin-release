
class TestResult {

    int testCount = 0
    int errorCount = 0
    int failureCount = 0

    TestResult(File xmlFile) {
        def testsuites = new groovy.util.XmlSlurper().parseText(xmlFile.text)
        testsuites.testsuite.each { suite ->
            testCount += suite["@tests"]
            errorCount += suite["@errors"]
            failureCount += suite["@failures"]
        }
    }
}

class TestResultList {

    List<TestResult> results;
    int testCount = 0
    int testPassCount = 0;

    TestResultList(List<TestResult> results) {
        this.results = results;
        
    }
}

class Package {

    String path
    Map<String, TaskState> tasks = new HashMap<>()

    Package(String path) {
        this.path = path;
    }


    File getTaskFile(Project project, String name) {
        return new File(project.projectDir, "${path.replace(':', '/')}/build/${name}.log")
    }

    List<TestResult> getTestResults() {
        def list = []
        def reportDir = new File(project.projectDir, "${path.replace(':', '/')}/build/renjin-test-reports")
        reportDir.eachFile(FileType.FILES) {
            if(it.name.endsWith(".xml")) {
                list.add(new TestResult(it))
            }
        }
        return list
    }

}

def packageMap = new HashMap<>()


def statusDescription = { TaskState task ->

    if(task == null) {
        return "";
    }
    if(task.upToDate) {
        return "Up-to-date"
    } else if(task.noSource) {
        return "No source";
    } else if(task.failure != null) {
        return "Failure"
    } else if(task.skipped) {
        return "Skipped"
    } else if(task.executed) {
        return "Executed"
    } else {
        return "?";
    }
}

def calcPercent = { String task ->

    double count = 0;
    double failed = 0;
    boolean ran = false;
    for(Package pkg in packageMap.values()) {
        count ++;
        def state = pkg.tasks.get(task)
        if(state == null || state.failure) {
            failed++;
        }
        if(state != null) {
            ran = true;
        }
    }
    if(ran) {
        return Math.round((count - failed) / count * 100d) + "%"
    } else {
        return "-"
    }
}

def writeIndex = { Project project, File indexFile ->

    PrintWriter pw = new PrintWriter(indexFile)
    pw.println("""
        <html>
        <head>
        <title>Package build report</title>
        <link rel="stylesheet" href="style.css">
        </head>
        <body>""")


    List<String> tasks = Arrays.asList("configure", "make", "compileGimple", "compileNamespace", "testNamespace");

    pw.println("""
        <h2>Task summary</h2>
        <table class="table table-bordered">
        <thead>
            <tr><th>Task</th><th>Percentage complete</th></tr>
        </thead>
        <tbody>""");

    for (String task : tasks) {
        pw.println("<tr><th>${task}</th><td>${calcPercent(task)}</td></tr>");
    }

    pw.println("</tbody></table>")

    pw.println("""
        <h2>Package summary</h2>
        <table class="table table-bordered">
        <thead>
        <tr>
            <th>Package</th>
        """)

    for (String task : tasks) {
        pw.println("<th scope=col>$task</th>");
    }
    pw.println("<th scope=col>Tests</th>")
    pw.println("</tr>");
    pw.println("</thead>");
    pw.println("<tbody>");

    for (Package pkg : packageMap.values()) {
        pw.println("<tr>");
        pw.println("<th>" + pkg.path + "</th>");

        for (String task : tasks) {
            File logFile = pkg.getTaskFile(project, task)
            File htmlLogFile = new File(indexFile.parentFile, pkg.path.replace(':', '_') + "." + logFile.name)
            if(logFile.exists()) {
                htmlLogFile.text = logFile.text
            }

            TaskState taskState = pkg.tasks.get(task);
            if(taskState != null && taskState.failure != null) {
                pw.println("""<td class="failed"><a href="${htmlLogFile.name}">Failure</a></td>""")
            } else if(taskState != null && (taskState.upToDate || taskState.executed)) {
                pw.println("""<td class="passed">${statusDescription(taskState)}</td>""")
            } else {
                pw.println("""<td>${statusDescription(taskState)}""")
            }
        }

        pw.println("</tr>");
    }
    pw.println("</tbody>");
    pw.println("</table>");
    pw.close();
    
}

gradle.taskGraph.addTaskExecutionListener(new TaskExecutionListener() {
    @Override
    void beforeExecute(Task task) {
    }

    @Override
    void afterExecute(Task task, TaskState state) {
        def pkg = packageMap.computeIfAbsent(task.getProject().getPath(), { path -> new Package(path) })
        pkg.tasks.put(task.getName(), state);
    }
})

gradle.addBuildListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {
    }

    @Override
    void settingsEvaluated(Settings settings) {
    }

    @Override
    void projectsLoaded(Gradle gradle) {
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
    }

    @Override
    void buildFinished(BuildResult result) {
        def reportDir = new File(buildDir, "report");
        reportDir.mkdirs()

        def indexFile = new File(reportDir, "index.html")
        writeIndex(project, indexFile)

        def styleSourceFile = new File(project.projectDir, "gradle/style.css")
        def styleOutFile = new File(buildDir, "report/style.css")
        styleOutFile.text = styleSourceFile.text
    }
})

